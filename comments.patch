diff --git a/build/MarginedEngine.client.ts b/build/MarginedEngine.client.ts
index 935785b..0394851 100644
--- a/build/MarginedEngine.client.ts
+++ b/build/MarginedEngine.client.ts
@@ -321,6 +321,12 @@ export interface MarginedEngineInterface extends MarginedEngineReadOnlyInterface
     pause: boolean;
   }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
 }
+/**
+ * The margin engine is responsible for managing user positions and collateral. Allows users to take positions in all registered vAMMs.
+ * ```ts
+ * const engineClient = new MarginedEngineClient(client);
+ * ```
+ */
 export class MarginedEngineClient extends MarginedEngineQueryClient implements MarginedEngineInterface {
   client: SigningCosmWasmClient;
   sender: string;
@@ -343,7 +349,12 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
     this.withdrawMargin = this.withdrawMargin.bind(this);
     this.setPause = this.setPause.bind(this);
   }
-
+  /**
+   * Enables owner to update key contract parameters.
+   * ```ts
+   * engineClient.updateConfig({ tollRatio: '5000', spreadRatio: '5000' })
+   * ```
+   */
   updateConfig = async ({
     feePool,
     initialMarginRatio,
@@ -406,6 +417,18 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, $fee, $memo, $funds);
   };
+  /**
+   * Enables a user to open a position for a specific vAMM with leverage. Also allows order to be placed with slippage limits.
+   * ```ts
+   * engineClient.openPosition({
+      vamm: vammClient.contractAddress,
+      side: 'buy',
+      marginAmount: '10000000',
+      leverage: '8000000',
+      baseAssetLimit: '4000000'
+    })
+   * ```   
+   */
   openPosition = async ({
     baseAssetLimit,
     leverage,
@@ -429,6 +452,15 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, $fee, $memo, $funds);
   };
+  /**
+   * Enables a user to close a position they have for a specific vAMM including slippage limits.
+   * ```ts
+   * engineClient.closePosition({
+   *   vamm: vammClient.contractAddress,
+   *   quoteAssetLimit: '0'
+   * });
+   * ```   
+   */
   closePosition = async ({
     quoteAssetLimit,
     vamm
@@ -443,6 +475,9 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, $fee, $memo, $funds);
   };
+  /***
+   * Allows third parties to liquidate users positions when they are no longer sufficiently collateralised.
+   */
   liquidate = async ({
     quoteAssetLimit,
     trader,
@@ -460,6 +495,9 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, $fee, $memo, $funds);
   };
+  /***
+   * Allows third parties to trigger funding payments to be processed for a specific vAMM.
+   */
   payFunding = async ({
     vamm
   }: {
@@ -471,6 +509,12 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, $fee, $memo, $funds);
   };
+  /***
+   * Users can deposit additional margin to their positions to prevent them from becoming under-collateralised.
+   * ```ts
+   * engineClient.depositMargin({ amount: '500000000', vamm: vammClient.contractAddress });
+   * ```
+   */
   depositMargin = async ({
     amount,
     vamm
@@ -485,6 +529,12 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, $fee, $memo, $funds);
   };
+  /**
+   * Users can withdraw excess collateral from their positions if they are over-collateralised
+   * ```ts
+   * engineClient.withdrawMargin({ amount: '500000000', vamm: vammClient.contractAddress });
+   * ```
+   */
   withdrawMargin = async ({
     amount,
     vamm
@@ -499,6 +549,9 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, $fee, $memo, $funds);
   };
+  /**
+   * Enables owner to pause contracts in emergency situations   
+   */
   setPause = async ({
     pause
   }: {
